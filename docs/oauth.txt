OAuth考察
作成：2012/03/15 Kac
変更：2012/05/24 Kac
============================================================================

OAuthとはあるサイトのサービスの実行を別のサイトに認可する為の仕組み
プロバイダ：サービス提供側
コンシューマ：サービス利用側
アクセス・トークン：サービス実行を許可する許可証
　コンシューマ１が、プロバイダ２のサービス３を自分の実行権限で実行する事を許可した印
　OAuthの認可処理とは、この許可証をコンシューマに与える事を意味する。
　コンシューマに対して、プロバイダのユーザ・パスワードを渡すのは抵抗があるので
　特定のサービスの実行権のみ渡す事が出来る。という仕組み。
　(例)このような事が可能になる
　　[プロバイダ２]　　[コンシューマＡ]　[コンシューマＢ]
　　　照会サービス　　　○　　　　　　　　○
　　　追加サービス　　　×　　　　　　　　×
　　　変更サービス　　　×　　　　　　　　○
　　　削除サービス　　　×　　　　　　　　×

OAuthに対応したサービスは、上記のアクセストークンを付加して呼び出す。

OAuth-1.0のコンシューマ実装は、ある程度出来るようになった。
・Yahoo アクセストークンの取得まで出来た
・Google 取得したアクセストークンを使って、WebMailサービス(RSS)を呼び出せた
・はてな 取得したアクセストークンを使って、ブックマック(RSS)を呼び出せた
・Twitter アクセストークンの取得まで出来た

習作の説明
　oauth/getRequestToken.do -> jp.co.ksi.incubator.oauth.GetRequestToken
　　プロバイダに対してリクエストトークンを取得する処理
　　リクエストトークンが取得出来たら、次にプロバイダ側で認証・認可を行う
　　認可すると、トークン・べリファイが返ってくる

　oauth/getAccessToken.do -> jp.co.ksi.incubator.oauth.GetAccessToken
　　プロバイダに対してアクセストークンを取得する処理
　　プロバイダにリクエストトークンとべリファイを送る

　oauth/callService.do -> jp.co.ksi.incubator.oauth.CallService
　　アクセストークンを使ってサービスを呼び出す処理

　oauth/saveToken.do -> jp.co.ksi.incubator.oauth.SaveToken
　　テスト用：得られたトークンをファイルに保存する処理

　oauth/loadToken.do -> jp.co.ksi.incubator.oauth.LoadToken
　　テスト用：保存したトークンを読み込む処理
　　読み込んだ後、CallServiceを呼び出せるようにしてある


問題点
１．プロバイダ毎に微妙に仕様が異なる
・Autharizationヘッダーに付加するパラメータ
　Yahooでは、カンマの後ろにブランクを入れるとエラー
・scopeパラメータ
　Googleでは必須パラメータ
　Yahooでは付加するとエラー
・署名方式oauth_signature_method
　Googleは、PLAINTEXT未対応
・リクエストメソッド
　Yahooは、GET,POST,Authorizationヘッダーに対応
　Googleは、Authorizationヘッダーのみ？
・共通鍵となるconsumer_secretは、いつ更新するのだろうか？
　oauth_token_secretのみ認可毎に更新で問題無いのかな？
・アクセス・トークンの有効期限は？
　2012/03/16 調査中

２．一般的には、以下が言われている(らしい)
・認証と署名の処理が複雑
　コンシューマ作成が困難？
　->そうか？むしろプロバイダ側が大変なんじゃないの？
・WEBアプリ以外への対応
　->なぜ問題なのか不明
・スケール時のパフォーマンス
　プロバイダ側でのリクエストトークンの管理が負担
　->これは何となく分かる。


OAuth-2.0について
・https必須
・リクエストトークンの廃止
・コンシューマのタイプを４つ仕様化
　WEBサーバ
　ユーザエージェント(JavaScript)
　ネイティブアプリ
　自立クライアント
・認可サーバとリソースオーナーを分離可能
　　認可のURLと、WEBサービス提供のURLを分けれるのだきっと

コンシューマ -> リダイレクト(client_id, scope, redirect_uri)
client_id: コンシューマ(プロバイダに登録済)
scope: 権限の範囲(プロバイダで定義)
redirect_uri: 認可ID受取先

[疑問]
上記リクエストはブラウザのリダイレクト経由なので改ざんの可能性を検討すべきだよな。
client_idとscopeは、書き換えても意味無いからいいよな。
　ユーザが認可するのは、client_idコンシューマからのscopeサービス呼出。
redirect_uriが書き換えられると、認可IDが別のURL(コンシューマ)に渡ってしまう。
これは問題だろうか？
認可は自分で行うから、自分が認可した認可IDが他のサイトに渡る事を意味する。
単なる自業自得？
フィッシングと組み合わせると問題があるのか？
他人のアクセストークンが取得できるか？
2012/06/07 サービス呼出時にsignatureが不要になったのは問題ではないか？


2012/06/07 oauth-1.0ではサービス呼出に何が要るのか？
authorizationを送らない
 -> 401エラー：token来ないから当然だな
signatureの付与を省略する
 -> 401エラー：やはり身元確認をしてるのだろうか？
　signatureにはconsumer_secret,oauth_token_secretの暗号化データが含まれる
　この仕様により、サービス呼出した人とコンシューマとトークン配布先が一致している事を確認できる


